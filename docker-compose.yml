# define the services or containers that will be running in your Docker environment.
services:
  postgres: # use official PostgreSQL Docker image -> set up to create their container at docker container
    image: postgres
    environment:
      - POSTGRES_PASSWORD=postgrespw
    ports:
      - 5432:5432
    volumes:
      # - pgdata:/var/lib/postgresql/data
      - /var/lib/postgresql/data
  mongodb: # use official MongoDB Docker image -> set up to create their container at docker container
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=mongopw
    ports:
      - 27017:27017
    volumes:
      # - mongodata:/var/lib/mongodb/data
      - /var/lib/mongodb/data
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - 5672:5672 # this port for rabbitmq - message broker
      - 15672:15672 # this port for rabbitmq management utility can access on browser ~ abstracting away from RabbitMq is MassTransit
  # cli: docker compose build auction-svc -> build the service/image inside docker compose
  # cli: docker compose up -d -> run the auction-svc container inside docker
  auction-svc:
    image: kientrung1105/auction-svc:latest
    build: 
    # context: . means inside the carsties directory where we run this command from the root of our dir
      context: .
      dockerfile: src/AuctionService/Dockerfile
    environment:
    # override default, it not going run in production
      - ASPNETCORE_ENVIRONMENT=Development
    # this is the internal URL that our app, our auctionService is going to run on
      - ASPNETCORE_URLS=http://+:80
    # Setup for AuctionService into Docker -> the same map with setup for it in appsetting.json
    # we need environment variable for rabbitmq to it -> rabbitmq which contaier we run it inside Docker above
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__DefaultConnection=Server=postgres:5432; User Id=postgres;Password=postgrespw;Database=auction
      - IdentityServiceUrl=http://identity-svc
    # port - what is this going to listen on. 7001 as external port - from outside the docker, 80 as internal port
    ports:
      - 7001:80
    # add the futher config the services which this service depend on AucService want to start rabbitmq, postgres
    depends_on:
      - postgres
      - rabbitmq
  search-svc:
    image: kientrung1105/search-svc:latest
    build:
      context: .
      dockerfile: src/SearchService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:80
      - RabbitMq__Host=rabbitmq
      - ConnectionStrings__MongoDbConnection=mongodb://root:mongopw@mongodb
      - AuctionServiceUrl=http://auction-svc
    ports:
      - 7002:80
    depends_on:
      - mongodb
      - rabbitmq
  identity-svc:
    image: kientrung1105/identity-svc:latest
    build:
      context: .
      dockerfile: src/IdentityService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__DefaultConnection=Server=postgres:5432; User Id=postgres;Password=postgrespw;Database=identity
    ports:
      - 5000:80
    depends_on:
      - postgres
  gateway-svc:
    image: kientrung1105/gateway-svc:latest
    build:
      context: .
      dockerfile: src/GatewayService/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker # this will be get the appsettings.Docker.json configuration
      - ASPNETCORE_URLS=http://+:80
    ports:
      - 6001:80
        
# volumes: 
# The volumes section ensures that the data for each service is stored outside the containers, making it persistent even if the containers are stopped or removed.
# If you config the absolute paths, and didnot use the volumes -> you are directly mounting host directories into containers -> it won't be persistent if the containers are stopped or removed.
  # pgdata:
  # mongodata:

# ex: mongodata:/var/lib/mongodb/data
# mongodata is a volume name
# /var/lib is a common directory for storing variable data on Unix-based systems.
# /mongodb is a meaningful subdirectory indicating that the data is related to MongoDB.
# /data is a conventional subdirectory where databases and other data-related content are often stored.
# -> actual storage location is within the virtual machine used by Docker. This virtual machine runs a Linux distribution, and the data is stored within that environment.

# The cli: docker compose up -d -> used to start the services defined in docker-compose.yml file in detached mode/(containers will run in the background, and you'll get your command prompt back)
# The cli: docker compose down -> used to stop and remove the containers defined in docker-compose.yml
# The cli: docker volume list -> show you a list of all volumes on system.

# *Note: Because of the volumes section -> help the  data is stored outside the container -> if the container stops and removes but retains these volumes unless you use 'docker compose down -v' or 'docker volume rm <volume-name>'